from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from brp.historie_api.models.base_model import Model
from brp.historie_api.models.historie_query import HistorieQuery
import re
from brp.historie_api import util

from brp.historie_api.models.historie_query import HistorieQuery  # noqa: E501
import re  # noqa: E501

class RaadpleegMetPeildatum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, burgerservicenummer=None, peildatum=None):  # noqa: E501
        """RaadpleegMetPeildatum - a model defined in OpenAPI

        :param type: The type of this RaadpleegMetPeildatum.  # noqa: E501
        :type type: str
        :param burgerservicenummer: The burgerservicenummer of this RaadpleegMetPeildatum.  # noqa: E501
        :type burgerservicenummer: str
        :param peildatum: The peildatum of this RaadpleegMetPeildatum.  # noqa: E501
        :type peildatum: date
        """
        self.openapi_types = {
            'type': str,
            'burgerservicenummer': str,
            'peildatum': date
        }

        self.attribute_map = {
            'type': 'type',
            'burgerservicenummer': 'burgerservicenummer',
            'peildatum': 'peildatum'
        }

        self._type = type
        self._burgerservicenummer = burgerservicenummer
        self._peildatum = peildatum

    @classmethod
    def from_dict(cls, dikt) -> 'RaadpleegMetPeildatum':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RaadpleegMetPeildatum of this RaadpleegMetPeildatum.  # noqa: E501
        :rtype: RaadpleegMetPeildatum
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this RaadpleegMetPeildatum.


        :return: The type of this RaadpleegMetPeildatum.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this RaadpleegMetPeildatum.


        :param type: The type of this RaadpleegMetPeildatum.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def burgerservicenummer(self) -> str:
        """Gets the burgerservicenummer of this RaadpleegMetPeildatum.


        :return: The burgerservicenummer of this RaadpleegMetPeildatum.
        :rtype: str
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer: str):
        """Sets the burgerservicenummer of this RaadpleegMetPeildatum.


        :param burgerservicenummer: The burgerservicenummer of this RaadpleegMetPeildatum.
        :type burgerservicenummer: str
        """
        if burgerservicenummer is None:
            raise ValueError("Invalid value for `burgerservicenummer`, must not be `None`")  # noqa: E501
        if burgerservicenummer is not None and not re.search(r'^[0-9]{9}$', burgerservicenummer):  # noqa: E501
            raise ValueError(r"Invalid value for `burgerservicenummer`, must be a follow pattern or equal to `/^[0-9]{9}$/`")  # noqa: E501

        self._burgerservicenummer = burgerservicenummer

    @property
    def peildatum(self) -> date:
        """Gets the peildatum of this RaadpleegMetPeildatum.

        De datum waarop de resource wordt opgevraagd.   # noqa: E501

        :return: The peildatum of this RaadpleegMetPeildatum.
        :rtype: date
        """
        return self._peildatum

    @peildatum.setter
    def peildatum(self, peildatum: date):
        """Sets the peildatum of this RaadpleegMetPeildatum.

        De datum waarop de resource wordt opgevraagd.   # noqa: E501

        :param peildatum: The peildatum of this RaadpleegMetPeildatum.
        :type peildatum: date
        """
        if peildatum is None:
            raise ValueError("Invalid value for `peildatum`, must not be `None`")  # noqa: E501

        self._peildatum = peildatum
